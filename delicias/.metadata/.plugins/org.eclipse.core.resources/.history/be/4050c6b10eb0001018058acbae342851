package com.senai.delicias.controllers;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.senai.delicias.entities.TipoProduto;
import com.senai.delicias.services.TipoProdutoService;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/tipoProdutos")
public class TipoProdutoController {

    private final TipoProdutoService tipoProdutoService;

    public TipoProdutoController(TipoProdutoService tipoProdutoService) {
        this.tipoProdutoService = tipoProdutoService;
    }

    // ✅ Buscar todos os tipos de produto
    @GetMapping
    public ResponseEntity<List<TipoProduto>> getAllTipoProdutos() {
        List<TipoProduto> tipos = tipoProdutoService.findAll();
        return ResponseEntity.ok(tipos);
    }

    // ✅ Buscar tipo de produto por ID
    @GetMapping("/{id}")
    public ResponseEntity<TipoProduto> getTipoProdutoById(@PathVariable Long id) {
        Optional<TipoProduto> tipo = tipoProdutoService.findById(id);
        return tipo.map(ResponseEntity::ok)
                   .orElse(ResponseEntity.notFound().build());
    }

    // ✅ Criar novo tipo de produto
    @PostMapping
    public ResponseEntity<TipoProduto> createTipoProduto(@RequestBody TipoProduto tipoProduto) {
        TipoProduto novoTipo = tipoProdutoService.save(tipoProduto);
        return ResponseEntity.status(HttpStatus.CREATED).body(novoTipo);
    }

    // ✅ Atualizar tipo de produto existente
    @PutMapping("/{id}")
    public ResponseEntity<TipoProduto> updateTipoProduto(@PathVariable Long id, @RequestBody TipoProduto tipoAtualizado) {
        Optional<TipoProduto> existente = tipoProdutoService.findById(id);

        if (existente.isPresent()) {
            tipoAtualizado.setIdTipoProduto(id);
            TipoProduto tipoSalvo = tipoProdutoService.save(tipoAtualizado);
            return ResponseEntity.ok(tipoSalvo);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // ✅ Deletar tipo de produto por ID
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTipoProduto(@PathVariable Long id) {
        Optional<TipoProduto> existente = tipoProdutoService.findById(id);

        if (existente.isPresent()) {
            tipoProdutoService.delete(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
